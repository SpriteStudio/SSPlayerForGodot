// generated argstr
static const char* shader_color_ss_circle =
"/*!\n"
"* \file		shader_color_ss_circle.gdshader\n"
"* \author	CRI Middleware Co., Ltd.\n"
"*/\n"
"shader_type canvas_item;\n"
"render_mode blend_mix;\n"
"\n"
"uniform float src_ratio;\n"
"uniform float dst_ratio;\n"
"uniform float dst_src_ratio;\n"
"\n"
"uniform float A_TW;\n"
"uniform float A_TH;\n"
"uniform float A_U1;\n"
"uniform float A_V1;\n"
"uniform float A_LU;\n"
"uniform float A_TV;\n"
"uniform float A_CU;\n"
"uniform float A_CV;\n"
"uniform float A_RU;\n"
"uniform float A_BV;\n"
"uniform float A_PM;\n"
"\n"
"uniform float P_0;\n"
"uniform float P_1;\n"
"uniform float P_2;\n"
"uniform float P_3;\n"
"\n"
"uniform sampler2D color;\n"
"uniform sampler2D alpha;\n"
"\n"
"uniform float use_mask;\n"
"uniform float draw_mask;\n"
"uniform float composite;\n"
"\n"
"vec4 ssCalcCompositeColor( int i, vec4 c, vec4 p )\n"
"{\n"
"	vec4	n = vec4( 1.0 );\n"
"\n"
"	if ( i == 1 ) c.rgb = c.rgb + p.rgb;\n"
"	else if ( i == 2 ) c.rgb = c.rgb - p.rgb;\n"
"	else if ( i == 3 ) c.rgb = c.rgb * p.rgb;\n"
"	else if ( i == 4 ) c.rgb = c.rgb / p.rgb;\n"
"	else if ( i == 5 ) c.rgb = n.rgb - ( n.rgb - p.rgb ) * ( n.rgb - c.rgb );\n"
"	else if ( i == 6 ) {\n"
"		if ( ( p.r + p.g + p.b ) / 3.0 < 0.5 ) { c.rgb = 2.0 * p.rgb * c.rgb; }else{ c.rgb = n.rgb - 2.0 * ( n.rgb - p.rgb ) * ( n.rgb - c.rgb ); }\n"
"	}\n"
"\n"
"	return	c;\n"
"}\n"
"\n"
"vec4 getBlendColor( vec4 c, vec4 p )\n"
"{\n"
"	return	vec4( p.rgb * src_ratio + mix( vec3( 1.0 ), p.rgb, dst_src_ratio ) * c.rgb * dst_ratio, p.a * c.a );\n"
"}\n"
"\n"
"vec4 ssPreProc( vec4 col, sampler2D tex, vec2 st, inout bool pass )\n"
"{\n"
"	float	fPhase = P_0;\n"
"	float	fDirection = P_1;\n"
"\n"
"	if ( A_TW <= 0.0 ) {\n"
"		return	col;\n"
"	}\n"
"\n"
"	float	Pi = 3.14159265358979;\n"
"	float	e = 1.0e-10;\n"
"	vec2	uv1 = vec2( A_U1 + e, A_V1 + e );\n"
"	vec2	tx = st / uv1;\n"
"	vec2	c = vec2( A_CU, A_CV ) / uv1;\n"
"	vec2	lt = vec2( A_LU, A_TV ) / uv1;\n"
"	vec2	rb = vec2( A_RU, A_BV ) / uv1;\n"
"	vec2	d = rb - lt;\n"
"	vec2	v = tx - c;\n"
"	float	r = min( abs( rb.x - c.x ), abs( rb.y - c.y ) ) + e;\n"
"	float	dis = length( v );\n"
"\n"
"	if ( dis > r ) {\n"
"		pass = true;\n"
"	}\n"
"\n"
"	vec2	nv = normalize( v );\n"
"	float	uu = 1.0 - dis / r;\n"
"	float	vv = ( atan( nv.y, nv.x ) / Pi + 1.0 ) * 0.5 + fPhase;\n"
"\n"
"	if ( vv < 0.0 ) {\n"
"		vv += 1.0;\n"
"	}\n"
"	if ( vv > 1.0 ) {\n"
"		vv -= 1.0;\n"
"	}\n"
"\n"
"	if ( fDirection <= 0.0 ) {\n"
"		vv = 1.0 - vv;\n"
"	}\n"
"\n"
"	vec2	xy = d * vec2( uu, vv ) * uv1;\n"
"\n"
"	vec4	Pixel = texture( tex, vec2( A_LU, A_TV ) + xy );\n"
"\n"
"	return	getBlendColor( col, Pixel );\n"
"}\n"
"\n"
"vec4 ssPostProc( vec4 c, vec4 p )\n"
"{\n"
"	float	fUm = use_mask;\n"
"	float	fDm = draw_mask;\n"
"	int		iCo = int( composite );\n"
"\n"
"//	if ( fDm >= 0.0 ) { c = ssCalcDrawMaskColor( fDm, c ); fUm = 0.0; iCo = 0; }\n"
"//	if ( fUm > 0.0 ) { c = ssCalcUseMaskColor( c ); }\n"
"	if ( iCo > 0 ) { c.rgb = c.rgb + p.rgb; }\n"
"\n"
"	return	c;\n"
"}\n"
"\n"
"void fragment()\n"
"{\n"
"	bool pass = false;\n"
"	COLOR = ssPreProc( COLOR, TEXTURE, UV, pass );\n"
"	if ( pass ) discard;\n"
"//	COLOR = ssMainProc();\n"
"//	COLOR = ssPostProc( COLOR, texture( color, SCREEN_UV, 0.0 ) );\n"
"}\n"
"";