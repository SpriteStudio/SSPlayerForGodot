// generated argstr
static const char* shader_color_ss_move =
"/*!\n"
"* \file		shader_color_ss_move.gdshader\n"
"* \author	CRI Middleware Co., Ltd.\n"
"*/\n"
"shader_type canvas_item;\n"
"render_mode blend_mix;\n"
"\n"
"uniform float src_ratio;\n"
"uniform float dst_ratio;\n"
"uniform float dst_src_ratio;\n"
"\n"
"uniform float A_TW;\n"
"uniform float A_TH;\n"
"uniform float A_U1;\n"
"uniform float A_V1;\n"
"uniform float A_LU;\n"
"uniform float A_TV;\n"
"uniform float A_CU;\n"
"uniform float A_CV;\n"
"uniform float A_RU;\n"
"uniform float A_BV;\n"
"uniform float A_PM;\n"
"\n"
"uniform float P_0;\n"
"uniform float P_1;\n"
"uniform float P_2;\n"
"uniform float P_3;\n"
"\n"
"uniform sampler2D color;\n"
"uniform sampler2D alpha;\n"
"\n"
"uniform float use_mask;\n"
"uniform float draw_mask;\n"
"uniform float composite;\n"
"\n"
"vec4 ssCalcCompositeColor( int i, vec4 c, vec4 p )\n"
"{\n"
"	vec4	n = vec4( 1.0 );\n"
"\n"
"	if ( i == 1 ) c.rgb = c.rgb + p.rgb;\n"
"	else if ( i == 2 ) c.rgb = c.rgb - p.rgb;\n"
"	else if ( i == 3 ) c.rgb = c.rgb * p.rgb;\n"
"	else if ( i == 4 ) c.rgb = c.rgb / p.rgb;\n"
"	else if ( i == 5 ) c.rgb = n.rgb - ( n.rgb - p.rgb ) * ( n.rgb - c.rgb );\n"
"	else if ( i == 6 ) {\n"
"		if ( ( p.r + p.g + p.b ) / 3.0 < 0.5 ) { c.rgb = 2.0 * p.rgb * c.rgb; }else{ c.rgb = n.rgb - 2.0 * ( n.rgb - p.rgb ) * ( n.rgb - c.rgb ); }\n"
"	}\n"
"\n"
"	return	c;\n"
"}\n"
"\n"
"vec4 getBlendColor( vec4 c, vec4 p )\n"
"{\n"
"	return	vec4( p.rgb * src_ratio + mix( vec3( 1.0 ), p.rgb, dst_src_ratio ) * c.rgb * dst_ratio, p.a * c.a );\n"
"}\n"
"\n"
"vec4 ssPreProc( vec4 col, sampler2D tex, vec2 st, inout bool pass )\n"
"{\n"
"	float	fDistance = P_0;\n"
"	float	fDirection = P_1;\n"
"	float	fPower = P_2;\n"
"\n"
"	if ( A_TW <= 0.0 ) {\n"
"		return	col;\n"
"	}\n"
"\n"
"	vec2	Coord;\n"
"	float	fPixW;\n"
"	float	fPixH;\n"
"	int		iCount;\n"
"	vec2	Vel;\n"
"	vec4	Pixel;\n"
"	float	Pi = 3.14159265358979;\n"
"\n"
"	Coord = st;\n"
"\n"
"	fPixW = A_U1;\n"
"	fPixH = A_V1;\n"
"\n"
"	iCount = int( floor( abs( fDistance ) * 96.0 ) );\n"
"\n"
"	Vel = vec2( sin( fDirection * Pi ) * fPixW, cos( fDirection * Pi ) * fPixH ) * sign( fDistance );\n"
"\n"
"	Coord += Vel * float(iCount);\n"
"\n"
"	Coord -= Vel;\n"
"	Pixel = texture( tex, Coord );\n"
"\n"
"	for ( int i = 1; i < iCount; i++ ) {\n"
"		Coord -= Vel;\n"
"		Pixel = mix( texture( tex, Coord ), Pixel, 0.96 * abs( fPower ) );\n"
"	}\n"
"\n"
"	return	getBlendColor( col, Pixel );\n"
"}\n"
"\n"
"vec4 ssPostProc( vec4 c, vec4 p )\n"
"{\n"
"	float	fUm = use_mask;\n"
"	float	fDm = draw_mask;\n"
"	int		iCo = int( composite );\n"
"\n"
"//	if ( fDm >= 0.0 ) { c = ssCalcDrawMaskColor( fDm, c ); fUm = 0.0; iCo = 0; }\n"
"//	if ( fUm > 0.0 ) { c = ssCalcUseMaskColor( c ); }\n"
"	if ( iCo > 0 ) { c.rgb = c.rgb + p.rgb; }\n"
"\n"
"	return	c;\n"
"}\n"
"\n"
"void fragment()\n"
"{\n"
"	bool pass = false;\n"
"	COLOR = ssPreProc( COLOR, TEXTURE, UV, pass );\n"
"	if ( pass ) discard;\n"
"//	COLOR = ssMainProc();\n"
"//	COLOR = ssPostProc( COLOR, texture( color, SCREEN_UV, 0.0 ) );\n"
"}\n"
"";